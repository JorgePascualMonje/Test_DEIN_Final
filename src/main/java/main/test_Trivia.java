/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 *
 * @author Nakahara Daiki
 */
public class test_Trivia extends javax.swing.JFrame {
    //Declaramos la nota
    int Nota = 0;
    //Arrays de posiciones de las preguntas, nos permitirá re-ordenarlas al azar
    //e identificar cuáles son las respuestas correctas
    Integer[] arraycopy = {1,2,3,4};
    Integer[] arraycopy2 = {6,7,8,9};
    Integer[] arraycopy3 = {11,12,13,14};
    //Array para almacenar los datos que obtengamos de la base de datos
    String preguntas[] = new String[15];
    
    
    //Preparación para la conexión con la base de datos
    Connection connection = null;
    Statement statement = null;
    private Connection connect() {
        Connection conn = null;
        try{
            conn = DriverManager.getConnection("jdbc:sqlite:database.db");
        }catch (SQLException e) {
            System.err.println(e.getMessage());
        }
        return conn;
    }

    /**
     * Creates new form test_Trivia
     */
    public test_Trivia() {
        initComponents();
        //Escondemos la nota
        labelResultado.setVisible(false);
        //Creamos objetos de los componentes personalizados para poder
        //utilizar los getters and setters
        nuevo_Test primerapregunta = pregunta_1;
        nuevo_Test segundapregunta = pregunta_2;
        nuevo_Test tercerapregunta = pregunta_3;
        //Re-ordenamos los arrays de posiciones al azar
        List<Integer> Shuffle = Arrays.asList(arraycopy);
        Collections.shuffle(Shuffle);
        Shuffle.toArray(arraycopy);
        List<Integer> Shuffle2 = Arrays.asList(arraycopy2);
        Collections.shuffle(Shuffle2);
        Shuffle2.toArray(arraycopy2);
        List<Integer> Shuffle3 = Arrays.asList(arraycopy3);
        Collections.shuffle(Shuffle3);
        Shuffle3.toArray(arraycopy3);
        try {
            //Nos conectamos a la base de datos
            connection = this.connect();
            statement = connection.createStatement();
            statement.setQueryTimeout(20);
            //Leemos los datos en la base para sacar 3 preguntas al azar
            String query = "SELECT * FROM ListaPreguntas ORDER BY RANDOM() LIMIT 3;";
            ResultSet rs = statement.executeQuery(query);
            
            //Recorremos la query para insertar los datos en nuestro array
            while (rs.next()) {
                int k = 0;
                preguntas[k] = rs.getString("Pregunta");
                preguntas[k+1] = rs.getString("Correcta");
                preguntas[k+2] = rs.getString("Erronea1");
                preguntas[k+3] = rs.getString("Erronea2");
                preguntas[k+4] = rs.getString("Erronea3");
                k = k + 5;
            }
            
            //Insertamos los datos en las preguntas correspondientes
            primerapregunta.setPregunta(preguntas[0]);
            primerapregunta.setRadio1(preguntas[arraycopy[0]]);
            primerapregunta.setRadio2(preguntas[arraycopy[1]]);
            primerapregunta.setRadio3(preguntas[arraycopy[2]]);
            primerapregunta.setRadio4(preguntas[arraycopy[3]]);
            
            segundapregunta.setPregunta(preguntas[5]);
            segundapregunta.setRadio1(preguntas[arraycopy2[0]]);
            segundapregunta.setRadio2(preguntas[arraycopy2[1]]);
            segundapregunta.setRadio3(preguntas[arraycopy2[2]]);
            segundapregunta.setRadio4(preguntas[arraycopy2[3]]);
            
            tercerapregunta.setPregunta(preguntas[10]);
            tercerapregunta.setRadio1(preguntas[arraycopy3[0]]);
            tercerapregunta.setRadio2(preguntas[arraycopy3[1]]);
            tercerapregunta.setRadio3(preguntas[arraycopy3[2]]);
            tercerapregunta.setRadio4(preguntas[arraycopy3[3]]);
        }catch(SQLException e) {
            System.err.println(e.getMessage());
        }
    }
    
    public int getNota() {
        return Nota;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonTerminar = new javax.swing.JButton();
        pregunta_2 = new main.nuevo_Test();
        pregunta_1 = new main.nuevo_Test();
        pregunta_3 = new main.nuevo_Test();
        labelResultado = new javax.swing.JLabel();
        menuTest = new javax.swing.JMenuBar();
        itemNavegacion = new javax.swing.JMenu();
        viajarMenuPrincipal = new javax.swing.JMenuItem();
        viajarNuevaPregunta = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        botonTerminar.setText("Terminar");
        botonTerminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTerminarActionPerformed(evt);
            }
        });

        labelResultado.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        labelResultado.setText("X/3");

        itemNavegacion.setText("Navegación");

        viajarMenuPrincipal.setText("Menú Principal");
        viajarMenuPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viajarMenuPrincipalActionPerformed(evt);
            }
        });
        itemNavegacion.add(viajarMenuPrincipal);

        viajarNuevaPregunta.setText("Crear Pregunta");
        viajarNuevaPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viajarNuevaPreguntaActionPerformed(evt);
            }
        });
        itemNavegacion.add(viajarNuevaPregunta);

        menuTest.add(itemNavegacion);

        setJMenuBar(menuTest);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pregunta_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pregunta_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pregunta_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonTerminar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pregunta_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(pregunta_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pregunta_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonTerminar)
                    .addComponent(labelResultado))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viajarMenuPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viajarMenuPrincipalActionPerformed
        // TODO add your handling code here:
        //Nos movemos al menú principal
        new main_Menu().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_viajarMenuPrincipalActionPerformed

    private void viajarNuevaPreguntaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viajarNuevaPreguntaActionPerformed
        // TODO add your handling code here:
        //Nos movemos a la pantalla para crear una nueva pregunta
        new formulario_Nueva_Pregunta().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_viajarNuevaPreguntaActionPerformed

    private void botonTerminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTerminarActionPerformed
        // TODO add your handling code here:
        nuevo_Test primerapregunta = pregunta_1;
        nuevo_Test segundapregunta = pregunta_2;
        nuevo_Test tercerapregunta = pregunta_3;
        //Variables para definir en que posicion se encuentran las respuestas correctas
        int correcta1 = Arrays.asList(arraycopy).indexOf(1);
        int correcta2 = Arrays.asList(arraycopy2).indexOf(6);
        int correcta3 = Arrays.asList(arraycopy3).indexOf(11);
        
        //Comprobamos en que posición está la respuesta correcta, luego, miramos si esa opcion
        //es la que está marcada, si lo está, añadimos nota
        switch (correcta1) {
            case 0 -> {
                if (primerapregunta.marcada1()) {
                    Nota = Nota + 1;
                }
            }
            case 1 -> {
                if (primerapregunta.marcada2()) {
                    Nota = Nota + 1;
                }
            }
            case 2 -> {
                if (primerapregunta.marcada3()) {
                    Nota = Nota + 1;
                }
            }
            case 3 -> {
                if (primerapregunta.marcada4()) {
                    Nota = Nota + 1;
                }
            }
            default -> {
            }
        }
        
        switch (correcta2) {
            case 0 -> {
                if (segundapregunta.marcada1()) {
                    Nota = Nota + 1;
                }
            }
            case 1 -> {
                if (segundapregunta.marcada2()) {
                    Nota = Nota + 1;
                }
            }
            case 2 -> {
                if (segundapregunta.marcada3()) {
                    Nota = Nota + 1;
                }
            }
            case 3 -> {
                if (segundapregunta.marcada4()) {
                    Nota = Nota + 1;
                }
            }
            default -> {
            }
        }
        
        switch (correcta3) {
            case 0 -> {
                if (tercerapregunta.marcada1()) {
                    Nota = Nota + 1;
                }
            }
            case 1 -> {
                if (tercerapregunta.marcada2()) {
                    Nota = Nota + 1;
                }
            }
            case 2 -> {
                if (tercerapregunta.marcada3()) {
                    Nota = Nota + 1;
                }
            }
            case 3 -> {
                if (tercerapregunta.marcada4()) {
                    Nota = Nota + 1;
                }
            }
            default -> {
            }
        }
        
        //Deshabilitamos los botones para que no puedan ser utilizados despues de completar el test
        primerapregunta.disable(false);
        segundapregunta.disable(false);
        tercerapregunta.disable(false);
        //Mostramos la nota
        labelResultado.setText(Nota+"/3");
        labelResultado.setVisible(true);
    }//GEN-LAST:event_botonTerminarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(test_Trivia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(test_Trivia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(test_Trivia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(test_Trivia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new test_Trivia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonTerminar;
    private javax.swing.JMenu itemNavegacion;
    private javax.swing.JLabel labelResultado;
    private javax.swing.JMenuBar menuTest;
    private main.nuevo_Test pregunta_1;
    private main.nuevo_Test pregunta_2;
    private main.nuevo_Test pregunta_3;
    private javax.swing.JMenuItem viajarMenuPrincipal;
    private javax.swing.JMenuItem viajarNuevaPregunta;
    // End of variables declaration//GEN-END:variables
}
